# -*- coding: utf-8 -*-
"""Optimizador_F1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwO79JlsDCyHQ8XvrlgKaLVRPG87HkLj
"""

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import random
#!pip install scikit-learn
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import cross_val_predict

df = pd.read_excel('/content/Dataset (7).xlsx')

df['Ritmo'].replace(['Conservar', 'Estandar','Ataque'],
                        [1,2,3], inplace=True)

df['Mezcla'].replace(['Conservar', 'Equilibrado','Apretar'],
                        [1,2,3], inplace=True)

df['Goma'].replace(['Blandos', 'Medios','Duros'],
                        [1,2,3], inplace=True)
df = df.drop(columns=['Porcentaje Gasolina','ERS (MJ)'])

df.head(5)

gomas = df['Goma']
neumaticos = df['Neumático'].values
gasolina = df['Gasolina (Kg)'].values
ritmo = df['Ritmo']
mezcla = df['Mezcla']
tiempo = df['Tiempo'].values
gasto = df['Gasto (Kg)']
desgaste = df['Desgaste (%)']

"""**REGRESIÓN LINEAL**"""

from sklearn.linear_model import LinearRegression

# Tiempo
X = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y = np.array(tiempo)
X_train, X_test, y_train, y_test = train_test_split(X,Y,random_state=42)

model = LinearRegression()
model.fit(X=X_train, y=y_train)
y_pred = model.predict(X_test)

r2 = cross_val_score(model, X, Y, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model, X, Y, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model, X, Y, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model, X, Y, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model, X, Y, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Consumo
X2 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y2 = np.array(gasto)
X_train, X_test, y_train, y_test = train_test_split(X2,Y2,random_state=42)

model2 = LinearRegression()
model2.fit(X=X_train, y=y_train)
y_pred = model2.predict(X_test)

r2 = cross_val_score(model2, X2, Y2, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model2, X2, Y2, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model2, X2, Y2, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Desgaste
X3 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y3 = np.array(desgaste)
X_train, X_test, y_train, y_test = train_test_split(X3,Y3,random_state=42)

model3 = LinearRegression()
model3.fit(X=X_train, y=y_train)
y_pred = model3.predict(X_test)

r2 = cross_val_score(model3, X3, Y3, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model3, X3, Y3, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model3, X3, Y3, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

"""**SUPPORT VECTOR REGRESION**"""

from sklearn.svm import SVR

# Tiempo

X = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y = tiempo

model_svr = SVR(kernel='rbf',C=20,epsilon=0.001).fit(X,Y)


r2 = cross_val_score(model_svr, X, Y, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model_svr, X, Y, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model_svr, X, Y, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model_svr, X, Y, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model_svr, X, Y, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Consumo

X2 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y2 = gasto

model_svr2 = SVR(kernel='rbf',C=15,epsilon=0.001).fit(X2,Y2)

r2 = cross_val_score(model_svr2, X2, Y2, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model_svr2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model_svr2, X2, Y2, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model_svr2, X2, Y2, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model_svr2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Desgaste

X3 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y3 = desgaste

model_svr3 = SVR(kernel='rbf',C=20,epsilon=0.001)

r2 = cross_val_score(model_svr3, X3, Y3, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(model_svr3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(model_svr3, X3, Y3, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(model_svr3, X3, Y3, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(model_svr3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

"""**MLP REGRESSOR**"""

from sklearn.neural_network import MLPRegressor
from sklearn.datasets import make_regression

# Tiempo

X = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y = tiempo

regr = MLPRegressor(random_state=42, max_iter=3000,activation='logistic',hidden_layer_sizes=150).fit(X_train, y_train)


r2 = cross_val_score(regr, X, Y, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regr, X, Y, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regr, X, Y, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regr, X, Y, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regr, X, Y, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Consumo

X2 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y2 = gasto

regr2 = MLPRegressor(random_state=42, max_iter=3000,hidden_layer_sizes=150,activation='logistic').fit(X_train, y_train)

r2 = cross_val_score(regr2, X2, Y2, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regr2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regr2, X2, Y2, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regr2, X2, Y2, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regr2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Desgaste

X3 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y3 = desgaste

regr3 = MLPRegressor(random_state=42, max_iter=3000,hidden_layer_sizes=25,activation='logistic').fit(X3, Y3)

r2 = cross_val_score(regr3, X3, Y3, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regr3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regr3, X3, Y3, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regr3, X3, Y3, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regr3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

"""**DECISION TREE REGRESSOR**"""

from sklearn.tree import DecisionTreeRegressor

# Tiempo

X = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y = np.array(tiempo)

regressor = DecisionTreeRegressor(random_state=0,criterion='friedman_mse').fit(X_train,y_train)

r2 = cross_val_score(regressor, X, Y, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regressor, X, Y, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regressor, X, Y, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regressor, X, Y, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regressor, X, Y, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Consumo

X2 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y2 = np.array(gasto)

regressor2 = DecisionTreeRegressor(random_state=0,criterion='poisson').fit(X_train,y_train)

r2 = cross_val_score(regressor2, X2, Y2, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regressor2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regressor2, X2, Y2, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regressor2, X2, Y2, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regressor2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Desgaste

X3 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y3 = np.array(desgaste)

regressor3 = DecisionTreeRegressor(random_state=0,criterion='poisson').fit(X_train,y_train)

r2 = cross_val_score(regressor3, X3, Y3, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(regressor3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(regressor3, X3, Y3, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(regressor3, X3, Y3, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(regressor3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

"""**KNN**"""

from sklearn.neighbors import KNeighborsRegressor

# Tiempo

X = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y = np.array(tiempo)

knn = KNeighborsRegressor(n_neighbors=5).fit(X_train,y_train)

r2 = cross_val_score(knn, X, Y, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(knn, X, Y, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(knn, X, Y, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(knn, X, Y, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(knn, X, Y, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Consumo

X2 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y2 = np.array(gasto)

knn2 = KNeighborsRegressor(n_neighbors=30).fit(X_train,y_train)

r2 = cross_val_score(knn2, X2, Y2, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(knn2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(knn2, X2, Y2, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(knn2, X2, Y2, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(knn2, X2, Y2, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())

# Desgaste

X3 = np.array([gomas,neumaticos,gasolina,ritmo,mezcla]).T
Y3 = np.array(desgaste)

knn3 = KNeighborsRegressor(n_neighbors=3).fit(X_train,y_train)

r2 = cross_val_score(knn3, X3, Y3, cv=10,scoring = 'r2')
print("R Square:",r2.mean(),"+-",r2.std())

mae = cross_val_score(knn3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_error')
print("MAE:",abs(mae.mean()),"+-",mae.std())

mse = cross_val_score(knn3, X3, Y3, cv=10,scoring = 'neg_mean_squared_error')
print("MSE:",abs(mse.mean()),"+-",mse.std())

rmse = cross_val_score(knn3, X3, Y3, cv=10,scoring = 'neg_root_mean_squared_error')
print("RMSE:",abs(rmse.mean()),"+-",rmse.std())

mape = cross_val_score(knn3, X3, Y3, cv=10,scoring = 'neg_mean_absolute_percentage_error')
print("MAPE:",abs(mape.mean()),"+-",mape.std())


def calcularTiempo(gomas,neumaticos,gasolina,ritmo,mezcla):
  time = model_svr.predict([[gomas,neumaticos,gasolina,ritmo,mezcla]])
  return time

def calcularConsumo(gomas,neumaticos,gasolina,ritmo,mezcla):
  gasto = model_svr2.predict([[gomas,neumaticos,gasolina,ritmo,mezcla]])
  return gasto

def calcularDesgaste(gomas,neumaticos,gasolina,ritmo,mezcla):
  desgaste = regr3.predict([[gomas,neumaticos,gasolina,ritmo,mezcla]])
  return desgaste

def validateStrategy(gomas,vueltas_parada,neumaticos_montados):
  res = []
  if (len(vueltas_parada)>1):
    [res.append(x) for x in vueltas_parada if x not in res]
    if(len(res)!=len(vueltas_parada)):
      return False

  cont = 0
  for n in neumaticos_montados:
    if (gomas == n):
      cont+=1
  if(cont == len(neumaticos_montados)):
    return False


  return True

import warnings
warnings.filterwarnings("ignore", category=np.VisibleDeprecationWarning) 
warnings.simplefilter(action='ignore', category=FutureWarning)

def executeStrategy(gomas,paradas,vueltas_parada,neumaticos_montados,ritmos,mezclas):

  neumatico = 99
  gasolina = 108.7
  tiempo = 0
  vuelta_actual = 1
  dnf = False

  
  if(validateStrategy(gomas,vueltas_parada,neumaticos_montados)==False):
    return float(100000)

  for parada in range(0,paradas):
    
    for vuelta in range(vuelta_actual,vueltas_parada[parada]+1):
    
      tiempo_vuelta = calcularTiempo(gomas,neumatico,gasolina,ritmos[vuelta-1],mezclas[vuelta-1])
      tiempo = tiempo_vuelta + tiempo
      neumatico = neumatico - calcularDesgaste(gomas,neumatico,gasolina,ritmos[vuelta-1],mezclas[vuelta-1])
      gasolina = gasolina - calcularConsumo(gomas,neumatico,gasolina,ritmos[vuelta-1],mezclas[vuelta-1])

      if neumatico<=0:
        dnf = True

      if gasolina <=0:
        dnf = True

    vuelta_actual = vueltas_parada[parada]+1
    gomas = neumaticos_montados[parada]
    neumatico = 100
    tiempo = tiempo + 25

  if dnf == False:

    for lap in range(vuelta_actual,57+1):
  
      tiempo_vuelta = calcularTiempo(gomas,neumatico,gasolina,ritmos[lap-1],mezclas[lap-1])
      tiempo = tiempo_vuelta + tiempo
      neumatico = neumatico - calcularDesgaste(gomas,neumatico,gasolina,ritmos[lap-1],mezclas[lap-1])
      gasolina = gasolina - calcularConsumo(gomas,neumatico,gasolina,ritmos[lap-1],mezclas[lap-1])

      if neumatico<=0:
          dnf = True
          break

      if gasolina <=0:
          dnf = True
          break

  if dnf==False:
    return float(tiempo) 
  else:
    return float(100000)

"""**REPRESENTACIÓN DE LOS GENES**"""

def generarIndividuo():

  initial_tyre_pool = [1,2,3]
  number_of_pitstops_pool = [1,2,3]
  lap_pitstops = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,
                  29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]
  tyre_changes = [1,2,3]
  ritmos_pool = [1,2,3]
  mezclas_pool = [1,2,3]

  individuo = []
  individuo+=[np.random.choice(initial_tyre_pool)]
  number_of_pits = np.random.choice(number_of_pitstops_pool)
  individuo += [number_of_pits]
  paradas = list(np.random.choice(lap_pitstops,number_of_pits))
  paradas = sorted(paradas)
  individuo += paradas

  pit_tyre_changes = list(np.random.choice(tyre_changes,number_of_pits))

  if pit_tyre_changes[0] == individuo[0]:
    
    while pit_tyre_changes[0] == individuo[0]:
     pit_tyre_changes = list(np.random.choice(tyre_changes,number_of_pits))

  individuo += pit_tyre_changes
  individuo += list(np.random.choice(ritmos_pool,57))
  individuo += list(np.random.choice(mezclas_pool,57))

  return individuo

"""**DE GENES A FORMATO DE ESTRATEGIA DE CARRERA**"""

def listToStrategy(individuo):
  
  gomas = individuo[0]
  number_of_pits = individuo[1]
  pit_laps = []
  tyre_changes = []
  ritmos = []
  mezclas = []

  current_pointer = 2
  centinela = number_of_pits

  while centinela!=0:
    pit_laps +=[individuo[current_pointer]]
    current_pointer = current_pointer + 1
    centinela = centinela -1

  centinela = number_of_pits

  while centinela!=0:
    tyre_changes +=[individuo[current_pointer]]
    current_pointer = current_pointer + 1
    centinela = centinela -1

  centinela = 57

  while centinela!=0:
    ritmos +=[individuo[current_pointer]]
    current_pointer = current_pointer + 1
    centinela = centinela -1

  centinela = 57

  while centinela!=0:
    mezclas +=[individuo[current_pointer]]
    current_pointer = current_pointer + 1
    centinela = centinela -1
  

  return gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas

"""**EVALUACIÓN DE FITNESS**"""

def fitnessEvaluation(poblacion):
  fitness = []
  individuos_fitness = list()

  for individuo in poblacion:
    gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(individuo)
    y = executeStrategy(gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas)
    fitness+=[1/y]
    individuos_fitness.append(individuo)

  fitness = np.array(fitness).astype('float64')
  fitness /= fitness.sum()
  individuos_ordenados = [x for _,x in sorted(zip(fitness,individuos_fitness),reverse=True)]
  fitness = sorted(fitness,reverse=True)
 
  return fitness,individuos_ordenados

"""**CRUCES**"""

def moneda(madre,padre,hijo1,hijo2):

  selection = random.uniform(0,1)

  if selection > 0.5:
    hijo1+=[madre]
    hijo2+=[padre]
  else:
    hijo1+=[padre]
    hijo2+=[madre]

def cruce_pit_information(number_of_pits,pit_laps,tyre_changes,number_of_pits2,pit_laps2,tyre_changes2,hijo1,hijo2):

    selection = random.uniform(0,1)
    if selection > 0.5:
      hijo1+=[number_of_pits]
      hijo1+=list(pit_laps)
      hijo1+=list(tyre_changes)
      
      hijo2+=[number_of_pits2]
      hijo2+=list(pit_laps2)
      hijo2+=list(tyre_changes2)
    else:
      hijo1+=[number_of_pits2]
      hijo1+=list(pit_laps2)
      hijo1+=list(tyre_changes2)

      hijo2+=[number_of_pits]
      hijo2+=list(pit_laps)
      hijo2+=list(tyre_changes)

def uniform_crossover(madre, padre):

  gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(madre)
  gomas2,number_of_pits2,pit_laps2,tyre_changes2,ritmos2,mezclas2 = listToStrategy(padre)
  hijo1 = []
  hijo2 = []

  moneda(gomas,gomas2,hijo1,hijo2)
  cruce_pit_information(number_of_pits,pit_laps,tyre_changes,number_of_pits2,pit_laps2,tyre_changes2,hijo1,hijo2)

  for index in range(len(ritmos)):
    moneda(ritmos[index],ritmos2[index],hijo1,hijo2)
  for index2 in range(len(mezclas)):
    moneda(mezclas[index],mezclas2[index],hijo1,hijo2)

  return hijo1,hijo2

def cruce_puntos(madre,padre,hijo1,hijo2):

  point= random.randint(0,56)
  selection = random.uniform(0,1)

  if selection > 0.5:

    for index in range(0,point):
      hijo1+=[madre[index]]
      hijo2+=[padre[index]]

    for index2 in range(point,57):
      hijo1+=[padre[index2]]
      hijo2+=[madre[index2]]

  else:

    for index in range(0,point):
      hijo1+=[padre[index]]
      hijo2+=[madre[index]]

    for index2 in range(point,57):
      hijo1+=[madre[index2]]
      hijo2+=[padre[index2]]

def cruce_puntos2(madre,padre,hijo1,hijo2):

  point= random.randint(0,56)
  point2= random.randint(point,56)

  selection = random.uniform(0,1)

  if selection > 0.5:

    for index in range(0,point):
      hijo1+=[madre[index]]
      hijo2+=[padre[index]]

    for index2 in range(point,point2):
      hijo1+=[padre[index2]]
      hijo2+=[madre[index2]]

    for index3 in range(point2,57):
      hijo1+=[padre[index3]]
      hijo2+=[madre[index3]]

  else:

    for index in range(0,point):
      hijo1+=[padre[index]]
      hijo2+=[madre[index]]

    for index2 in range(point,point2):
      hijo1+=[madre[index2]]
      hijo2+=[padre[index2]]
    
    for index3 in range(point2,57):
      hijo1+=[padre[index3]]
      hijo2+=[madre[index3]]

def one_point_crossover(madre,padre):

  gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(madre)
  gomas2,number_of_pits2,pit_laps2,tyre_changes2,ritmos2,mezclas2 = listToStrategy(padre)
  hijo1 = []
  hijo2 = []

  moneda(gomas,gomas2,hijo1,hijo2)
  cruce_pit_information(number_of_pits,pit_laps,tyre_changes,number_of_pits2,pit_laps2,tyre_changes2,hijo1,hijo2)
  cruce_puntos(ritmos,ritmos2,hijo1,hijo2)
  cruce_puntos(mezclas,mezclas2,hijo1,hijo2)

  return hijo1,hijo2

def two_point_crossover(madre,padre):

  gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(madre)
  gomas2,number_of_pits2,pit_laps2,tyre_changes2,ritmos2,mezclas2 = listToStrategy(padre)
  hijo1 = []
  hijo2 = []

  moneda(gomas,gomas2,hijo1,hijo2)
  cruce_pit_information(number_of_pits,pit_laps,tyre_changes,number_of_pits2,pit_laps2,tyre_changes2,hijo1,hijo2)
  cruce_puntos2(ritmos,ritmos2,hijo1,hijo2)
  cruce_puntos2(mezclas,mezclas2,hijo1,hijo2)

  return hijo1,hijo2

"""**MUTACIONES**"""

def mutate(hijo1,prob):

  tyre_pool = [1,2,3]
  lap_pitstops = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,
                  29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]
  ritmos_pool = [1,2,3]
  mezclas_pool = [1,2,3]

  probabilidad = random.uniform(0,1)

  if probabilidad<prob:

    
    gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(hijo1)
    hijo1 = []
    point= random.randint(0,4)

    if(point == 0):
      gomas = np.random.choice(tyre_pool)
      hijo1+=[gomas]
      hijo1+=[number_of_pits]
      hijo1+=pit_laps
      hijo1+=tyre_changes
      hijo1+=ritmos
      hijo1+=mezclas
      #print("mutacion gomas")

    if(point == 1):
      pit_laps = list()
      pit_laps = list(np.random.choice(lap_pitstops,number_of_pits))
      pit_laps = sorted(pit_laps)
      hijo1+=[gomas]
      hijo1+=[number_of_pits]
      hijo1+=pit_laps
      hijo1+=tyre_changes
      hijo1+=ritmos
      hijo1+=mezclas
      #print("mutacion vueltas de parada")
    
    if(point == 2):
      tyre_changes = list()
      tyre_changes = list(np.random.choice(tyre_pool,number_of_pits))
      hijo1+=[gomas]
      hijo1+=[number_of_pits]
      hijo1+=pit_laps
      hijo1+=tyre_changes
      hijo1+=ritmos
      hijo1+=mezclas
      #print("mutacion neumaticos de parada")
    
    if(point == 3):
      point = random.randint(0,56)
      inte = np.random.choice(ritmos_pool,1)
      ritmos[point] = inte[0]
      hijo1+=[gomas]
      hijo1+=[number_of_pits]
      hijo1+=pit_laps
      hijo1+=tyre_changes
      hijo1+=ritmos
      hijo1+=mezclas
      #print("mutacion ritmos en posicion",point)

    if(point == 4):
      point = random.randint(0,56)
      inte = np.random.choice(mezclas_pool,1)
      mezclas[point] = inte[0]
      hijo1+=[gomas]
      hijo1+=[number_of_pits]
      hijo1+=pit_laps
      hijo1+=tyre_changes
      hijo1+=ritmos
      hijo1+=mezclas
      #print("mutacion mezclas en posicion",point)
    
    
    return hijo1

"""**OPTIMIZADOR GENETICO**"""

poblacion_actual = list()
count_estrategias_fallidas = 0

for i in range(1000):
  individuo_generado = generarIndividuo()
  poblacion_actual.append(individuo_generado)
  gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(individuo_generado)
  y = executeStrategy(gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas)

  if y == 100000:
    count_estrategias_fallidas+=1
  plt.plot(i,y,'x')

print("Porcentaje de estrategias fallidas:",count_estrategias_fallidas/len(poblacion_actual)*100)
plt.xlabel(xlabel = "Individuos")
plt.ylabel(ylabel = "Tiempo")

generaciones = 50
ejey = list()

for i in range(generaciones):

  fitness,individuos_ordenados = fitnessEvaluation(poblacion_actual)

  gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(individuos_ordenados[0])
  y=executeStrategy(gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas)
  print(y,i)
  ejey.append(y)


  descendientes = list()

  for i in range(len(individuos_ordenados)):
    parents = np.random.choice(len(individuos_ordenados),2,p=fitness)
    hijo1,hijo2 = two_point_crossover(individuos_ordenados[parents[0]],individuos_ordenados[parents[1]])
    mutate(hijo1,0.1)
    mutate(hijo2,0.1)
    descendientes.append(hijo1)
    descendientes.append(hijo2)

  for elem in descendientes:
    poblacion_actual.append(elem)
  
  fitness,individuos_ordenados = fitnessEvaluation(poblacion_actual)
  poblacion_nueva = list()
  
  for i in range(0,100):
    #individuo = np.random.choice(len(individuos_ordenados),1,p=fitness)
    poblacion_nueva.append(individuos_ordenados[i])
    poblacion_actual.remove(individuos_ordenados[i]) 

  fitness,individuos_ordenados = fitnessEvaluation(poblacion_actual)

  for j in range(100,1000):
    individuo = np.random.choice(len(individuos_ordenados),1,p=fitness)
    poblacion_nueva.append(individuos_ordenados[individuo[0]])
  
  poblacion_actual = poblacion_nueva

"""**RESULTADOS**"""

fitness,individuos_ordenados = fitnessEvaluation(poblacion_actual)
gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas = listToStrategy(individuos_ordenados[0])
y = executeStrategy(gomas,number_of_pits,pit_laps,tyre_changes,ritmos,mezclas)

seconds = y
minutes, seconds = divmod(seconds, 60)
hours, minutes = divmod(minutes, 60)
print("Tiempo total de carrera estimado")
print("%02d:%02d:%02d"%(hours,minutes,seconds),"\n")
print("Gomas iniciales:",gomas)
print("Numero de paradas:",number_of_pits)
print("Vueltas de parada:",pit_laps)
print("Neumaticos a montar:",tyre_changes)
print("Ritmos:",ritmos)
print("Mezclas:",mezclas)
